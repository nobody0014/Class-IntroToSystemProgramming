for all:
run "gdb bomb"
break explode_bomb


6 arguments:
rdi
rsi
rdx
rcx
r8
r9

return rax

1)
print out the item that's being pushed into rsi before going into the string_not_equal
rdi is the input from the main
rsi is the item that is being compared
if you print the rsi, you get the answer

2)
so, get first six numbers will take the array of the first six numbers of the input.
for my bomb, they compare first 2 numbers (0 and 1) before entering a loop
basically i have to find input that would eventually allow me to reach the same address as the 5th number.

3)
So..... you have ja is basically jg but unsinged. remember that cus it means u have to input sth lower or equal to 0x7.
the input u put will jump u to the correct switch place where you have to put the last decimal correctly to pass. 
ez, just remember to read and understand the command properly next time.
the format for the input is %d %c %d, the char doesnt matter, it's not used anywhere except the first part where the program 
wants a correct input.

4)
This is recursion hell, you dont have to totally understand func4 but here's the deal, function 4 doesnt make use of the first input decimal u put in AT ALL, it just compare them with the result of the func4 at the end, which means, you just have to get your second input decimal right and see what numbe pop up from it and let your first input be that number and u are done.

5)
Easy as pie. THe first thing they did is to check string length of your input. Then they do some mambo jumpo with each character of your input, adding them to %ecx (for my bomb) and then check ecx with 0x30 once they are done, so you just have to see what kind of value each of your char has and change the string accordingly to get 0x30 for ecx at the end.
Becareful and dont panic, the 0x30 is in hexadecimal, meaning that your 0x28 is actually further from 0x30 than it looks.

6)
Okay this is confusing as fuck but bear with me.
1st step, u will realise that it takes in 6 numbers just like phase_2.
2nd step, the number they want is less than or equal to 6.
3rd step, they dont want any input number to be the same.
4th step, they do some mambo jumbo jump around with number and thats where you realise they are swapping values and such and struct.
5th step, you have to get the value of all those nodes (the node number and its associated values)
6th step, check out conditions they check for the last bomb.
7th step, rearrange your inputs so that the it fits the conditions for all the loop.
DONE!






















